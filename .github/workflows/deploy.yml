name: CI/CD - Go App with App Runner

on:
  push:
    branches: 
      - main
      - hotfix

# env:
#   AWS_REGION: us-east-1
#   APP_NAME: gobid
#   IMAGE_TAG: latest
#   ECR_REPO: ${{ vars.ECR_REPO }}
#   Service_ARN: ${{ vars.APP_+RUNNER_SERVICE_ARN }}


jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.25

      - name: Rodar go fmt
        run: test -z "$(gofmt -l .)" || (echo "Código não formatado"; exit 1)

      - name: Rodar go vet
        run: go vet ./...

  tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.25

      - name: Check go.mod/go.sum
        run: |
          go mod tidy
          git diff --exit-code || (echo "go.mod or go.sum are unupdated"; exit 1)


  test:
    runs-on: ubuntu-latest
    needs: [lint, tidy]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.25

      - name: Checking tests
        run: go test ./...

  coverage:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.25

      - name: Checking coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
          go tool cover -func=coverage.out | grep total | awk '{ print $$3 }' > coverage.txt

      - name: Validation coverage
        run: |
          COV=$(cat coverage.txt | sed 's/%//')
          MIN=0
          echo "Current Coverage: $$COV%"
          if [ "$$COV" -lt "$$MIN"]; then
            echo "Coverage under minimum ($$MIN%)"
            exit 1
          fi

  # deploy:
  #   needs: [coverage]
  #   runs-on: ubuntu-latest
  #   environment: GoBid
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Confire AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-regin: ${{ env.AWS_REGION }}

  #     - name: Login in AWS ECR
  #       run: |
  #         aws ecr get-login-password --region $AWS_REGION | \
  #         docker login --username AWS --password-stdin $ECR_REPO

  #     - name: Build App image
  #       run: docker build -t $APP_NAME:$IAMGE_TAG -f Dockerfile.prod .

  #     - name: Tag and push of image to ECR
  #       run: |
  #         docker tag $APP_NAME:$ImAGE_TAG $ECR_REPO/$APP_NAME:$IMAGE_TAG
  #         docker push $ECR_REPO/$APP_NAME:$IAMGE_TAG

  #     - name: Update APP Runner
  #       run: |
  #         aws apprunner update-service \
  #           --service-arn: $SERVICE_ARN \
  #           --source-configuration file://apprunner-config.json \
  #           -- region $AWS_REGION
